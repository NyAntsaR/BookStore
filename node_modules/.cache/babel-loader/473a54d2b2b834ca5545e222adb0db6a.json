{"ast":null,"code":"import _objectSpread from \"/Users/nyantsa/Desktop/react-node-ecommerce/100-147/112 CODE cart total/ecommerce-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport const addItem = (item, next) => {\n  let cart = [];\n\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.push(_objectSpread({}, item, {\n      count: 1\n    })); // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n    next();\n  }\n};\nexport const itemTotal = () => {\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\")).length;\n    }\n  }\n\n  return 0;\n};\nexport const getCart = () => {\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\"));\n    }\n  }\n\n  return [];\n};\nexport const updateItem = (productId, count) => {\n  let cart = [];\n\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n};\nexport const removeItem = productId => {\n  let cart = [];\n\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart.splice(i, 1);\n      }\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n\n  return cart;\n};","map":{"version":3,"sources":["/Users/nyantsa/Desktop/react-node-ecommerce/100-147/112 CODE cart total/ecommerce-front/src/components/Core/cartHelpers.js"],"names":["addItem","item","next","cart","window","localStorage","getItem","JSON","parse","push","count","Array","from","Set","map","p","_id","id","find","setItem","stringify","itemTotal","length","getCart","updateItem","productId","product","i","removeItem","splice"],"mappings":"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","sourcesContent":["export const addItem = (item, next) => {\n    let cart = [];\n    if (typeof window !== \"undefined\") {\n        if (localStorage.getItem(\"cart\")) {\n            cart = JSON.parse(localStorage.getItem(\"cart\"));\n        }\n        cart.push({\n            ...item,\n            count: 1\n        });\n\n        // remove duplicates\n        // build an Array from new Set and turn it back into array using Array.from\n        // so that later we can re-map it\n        // new set will only allow unique values in it\n        // so pass the ids of each object/product\n        // If the loop tries to add the same value again, it'll get ignored\n        // ...with the array of ids we got on when first map() was used\n        // run map() on it again and return the actual product from the cart\n\n        cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n            return cart.find(p => p._id === id);\n        });\n\n        localStorage.setItem(\"cart\", JSON.stringify(cart));\n        next();\n    }\n};\n\nexport const itemTotal = () => {\n    if (typeof window !== \"undefined\") {\n        if (localStorage.getItem(\"cart\")) {\n            return JSON.parse(localStorage.getItem(\"cart\")).length;\n        }\n    }\n    return 0;\n};\n\nexport const getCart = () => {\n    if (typeof window !== \"undefined\") {\n        if (localStorage.getItem(\"cart\")) {\n            return JSON.parse(localStorage.getItem(\"cart\"));\n        }\n    }\n    return [];\n};\n\nexport const updateItem = (productId, count) => {\n    let cart = [];\n    if (typeof window !== \"undefined\") {\n        if (localStorage.getItem(\"cart\")) {\n            cart = JSON.parse(localStorage.getItem(\"cart\"));\n        }\n\n        cart.map((product, i) => {\n            if (product._id === productId) {\n                cart[i].count = count;\n            }\n        });\n\n        localStorage.setItem(\"cart\", JSON.stringify(cart));\n    }\n};\n\nexport const removeItem = productId => {\n    let cart = [];\n    if (typeof window !== \"undefined\") {\n        if (localStorage.getItem(\"cart\")) {\n            cart = JSON.parse(localStorage.getItem(\"cart\"));\n        }\n\n        cart.map((product, i) => {\n            if (product._id === productId) {\n                cart.splice(i, 1);\n            }\n        });\n\n        localStorage.setItem(\"cart\", JSON.stringify(cart));\n    }\n    return cart;\n};\n"]},"metadata":{},"sourceType":"module"}